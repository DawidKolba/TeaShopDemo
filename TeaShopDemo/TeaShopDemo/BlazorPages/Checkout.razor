@page "/app/checkout"
@using Microsoft.AspNetCore.Components.Forms
@using TeaShopDemo.Models
@using TeaShopDemo.Models.TeaShopDemo.Models
@using TeaShopDemo.Services
@inject CartService CartService
@inject NavigationManager NavigationManager
@inject OrderService OrderService

<div class="container" style="margin-top:10rem">
    <h3>Checkout - Demo Version</h3>
    <p class="alert alert-warning" style="color:red;font-weight:800;font-size:large">
        This is a demo version of the checkout process. No actual orders will be processed.
    </p>

    @if (!isOrderSubmitted)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleFormSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label class="form-label">Full Name</label>
                <InputText class="form-control" @bind-Value="orderInfo.FullName" />
                <ValidationMessage For="@(() => orderInfo.FullName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Address Line 1</label>
                <InputText class="form-control" @bind-Value="orderInfo.AddressLine1" />
                <ValidationMessage For="@(() => orderInfo.AddressLine1)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Address Line 2 (Optional)</label>
                <InputText class="form-control" @bind-Value="orderInfo.AddressLine2" />
            </div>

            <div class="mb-3">
                <label class="form-label">City</label>
                <InputText class="form-control" @bind-Value="orderInfo.City" />
                <ValidationMessage For="@(() => orderInfo.City)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Postal Code</label>
                <InputText class="form-control" @bind-Value="orderInfo.PostalCode" />
                <ValidationMessage For="@(() => orderInfo.PostalCode)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Country</label>
                <InputText class="form-control" @bind-Value="orderInfo.Country" />
                <ValidationMessage For="@(() => orderInfo.Country)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                @(isProcessing ? "Processing..." : "Finalize Order")
            </button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </EditForm>
    }
    else
    {
        <div class="alert alert-success mt-3">
            Thank you for your order! This is just a demo, and no real purchase was made.
        </div>
        <div class="text-center mt-3">
            <button class="btn btn-primary" @onclick="@NavigateToHome">Go to Home</button>
        </div>
    }
</div>

@code {
    private OrderInfo orderInfo = new();
    private bool isOrderSubmitted;
    private bool isProcessing;
    private string? errorMessage;
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(orderInfo);
    }

    private async Task HandleFormSubmit()
    {
        if (isProcessing) return; 

        isProcessing = true;
        errorMessage = null;

        var cartItems = CartService.GetCartItems();

        if (cartItems == null || !cartItems.Any())
        {
            errorMessage = "Your cart is empty. Please add items before checkout.";
            isProcessing = false;
            return;
        }

        try
        {
            var order = new Order
                {
                    FullName = orderInfo.FullName,
                    AddressLine1 = orderInfo.AddressLine1,
                    AddressLine2 = orderInfo.AddressLine2,
                    City = orderInfo.City,
                    PostalCode = orderInfo.PostalCode,
                    Country = orderInfo.Country,
                    OrderDate = DateTime.UtcNow,
                    TotalPrice = cartItems.Sum(item => item.Price * item.Quantity),
                    OrderItems = cartItems.Select(item => new OrderItem
                    {
                        ProductId = item.ProductId,
                        Quantity = item.Quantity,
                        Price = item.Price
                    }).ToList()
                };

            await OrderService.CreateOrderAsync(order);
            CartService.ClearCart();

            isOrderSubmitted = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while processing the order: {ex.Message}";
            Console.WriteLine($"Checkout error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
