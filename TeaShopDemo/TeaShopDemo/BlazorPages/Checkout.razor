@page "/app/checkout"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using TeaShopDemo.Models
@using TeaShopDemo.Models.TeaShopDemo.Models
@using TeaShopDemo.Services
@inject CartService CartService
@inject NavigationManager NavigationManager
@inject OrderService OrderService

<div class="container" style="margin-top:10rem">
    <h3>Checkout - Demo Version</h3>
    <p class="alert alert-warning" style="color:red;font-weight:800;font-size:large">This is a demo version of the checkout process. No actual orders will be processed.</p>

    @if (!isOrderSubmitted)
    {
        <EditForm Model="@orderInfo" OnValidSubmit="HandleCheckout">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Full Name -->
            <div class="mb-3">
                <label for="fullName" class="form-label">Full Name</label>
                <InputText id="fullName" class="form-control" @bind-Value="orderInfo.FullName" />
                <ValidationMessage For="@(() => orderInfo.FullName)" />
            </div>

            <!-- Address Line 1 -->
            <div class="mb-3">
                <label for="address1" class="form-label">Address Line 1</label>
                <InputText id="address1" class="form-control" @bind-Value="orderInfo.AddressLine1" />
                <ValidationMessage For="@(() => orderInfo.AddressLine1)" />
            </div>

            <!-- Address Line 2 -->
            <div class="mb-3">
                <label for="address2" class="form-label">Address Line 2 (Optional)</label>
                <InputText id="address2" class="form-control" @bind-Value="orderInfo.AddressLine2" />
                <ValidationMessage For="@(() => orderInfo.AddressLine2)" />
            </div>

            <!-- City -->
            <div class="mb-3">
                <label for="city" class="form-label">City</label>
                <InputText id="city" class="form-control" @bind-Value="orderInfo.City" />
                <ValidationMessage For="@(() => orderInfo.City)" />
            </div>

            <!-- Postal Code -->
            <div class="mb-3">
                <label for="postalCode" class="form-label">Postal Code</label>
                <InputText id="postalCode" class="form-control" @bind-Value="orderInfo.PostalCode" />
                <ValidationMessage For="@(() => orderInfo.PostalCode)" />
            </div>

            <!-- Country -->
            <div class="mb-3">
                <label for="country" class="form-label">Country</label>
                <InputText id="country" class="form-control" @bind-Value="orderInfo.Country" />
                <ValidationMessage For="@(() => orderInfo.Country)" />
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary">Finalize Order</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }
    }
    else
    {
        <div class="alert alert-success mt-3" role="alert">
            Thank you for your order! This is just a demo, and no real purchase was made.
        </div>
        <div class="text-center mt-3">
            <button class="btn btn-primary" @onclick="GoToHome">Go to Home</button>
        </div>
    }
</div>

@code {
    private OrderInfo orderInfo = new OrderInfo();
    private bool isOrderSubmitted = false;
    private string errorMessage;

    private async Task HandleCheckout()
    {
        var cartItems = CartService.GetCartItems();

        if (cartItems.Any())
        {
            var order = new Order
            {
                FullName = orderInfo.FullName,
                AddressLine1 = orderInfo.AddressLine1,
                AddressLine2 = orderInfo.AddressLine2,
                City = orderInfo.City,
                PostalCode = orderInfo.PostalCode,
                Country = orderInfo.Country,
                OrderDate = DateTime.Now,
                TotalPrice = cartItems.Sum(item => item.Price * item.Quantity),
                OrderItems = cartItems.Select(item => new OrderItem
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    Price = item.Price
                }).ToList()
            };

            await OrderService.CreateOrderAsync(order);

            CartService.ClearCart();

            isOrderSubmitted = true;
        }
        else
        {
            errorMessage = "Your cart is empty. Please add items to your cart before proceeding to checkout.";
        }
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/", true);
    }
}
